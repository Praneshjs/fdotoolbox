#region LGPL Header
// Copyright (C) 2008, Jackie Ng
// http://code.google.com/p/fdotoolbox, jumpinjackie@gmail.com
// 
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
// 
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
// 
#endregion
using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using OSGeo.FDO.Schema;

namespace FdoToolbox.Core.Utility
{
    public class FdoMetaDataNames
    {
        public const string FDO_IDENTITY_PROPERTY = "FDO_IDENTITY_PROPERTY";
        public const string FDO_DATA_TYPE = "FDO_DATA_TYPE";
        public const string FDO_DATA_AUTOGENERATED = "FDO_DATA_AUTOGENERATED";
        public const string FDO_DATA_NULLABLE = "FDO_DATA_NULLABLE";
        public const string FDO_DATA_READONLY = "FDO_DATA_READONLY";
        public const string FDO_DATA_LENGTH = "FDO_DATA_LENGTH";
        public const string FDO_DATA_DEFAULT_VALUE = "FDO_DATA_DEFAULT_VALUE";
        public const string FDO_DATA_SCALE = "FDO_DATA_SCALE";
        public const string FDO_DATA_PRECISION = "FDO_DATA_PRECISION";

        public const string FDO_GEOMETRY_PROPERTY = "FDO_GEOMETRY_PROPERTY";
        public const string FDO_GEOMETRY_TYPE = "FDO_GEOMETRY_PROPERTY_TYPE";
        public const string FDO_GEOMETRY_HAS_ELEVATION = "FDO_GEOMETRY_PROPERTY_HAS_ELEVATION";
        public const string FDO_GEOMETRY_HAS_MEASURE = "FDO_GEOMETRY_PROPERTY_HAS_MEASURE";
        public const string FDO_GEOMETRY_READONLY = "FDO_GEOMETRY_PROPERTY_READONLY";
    }

    public sealed class FdoMetaData
    {
        public static bool IsGeometryProperty(DataColumn col)
        {
            return col.ExtendedProperties[FdoMetaDataNames.FDO_GEOMETRY_PROPERTY] != null;
        }

        public static bool IsIdentityProperty(DataColumn col)
        {
            return col.ExtendedProperties[FdoMetaDataNames.FDO_IDENTITY_PROPERTY] != null;
        }

        public static bool HasMetaData(DataColumn col, string key)
        {
            return col.ExtendedProperties[key] != null;
        }

        public static int GetGeometryType(DataColumn col)
        {
            if (!HasMetaData(col, FdoMetaDataNames.FDO_GEOMETRY_TYPE))
                throw new ArgumentException("Column does not have the required metadata");
            return Convert.ToInt32(col.ExtendedProperties[FdoMetaDataNames.FDO_GEOMETRY_TYPE]);
        }

        public static bool HasElevation(DataColumn col)
        {
            if (!HasMetaData(col, FdoMetaDataNames.FDO_GEOMETRY_HAS_ELEVATION))
                throw new ArgumentException("Column does not have the required metadata");
            return Convert.ToBoolean(col.ExtendedProperties[FdoMetaDataNames.FDO_GEOMETRY_HAS_ELEVATION]);
        }

        public static bool HasMeasure(DataColumn col)
        {
            if (!HasMetaData(col, FdoMetaDataNames.FDO_GEOMETRY_HAS_MEASURE))
                throw new ArgumentException("Column does not have the required metadata");

            return Convert.ToBoolean(col.ExtendedProperties[FdoMetaDataNames.FDO_GEOMETRY_HAS_MEASURE]);
        }

        public static bool IsGeometryReadOnly(DataColumn col)
        {
            if (!HasMetaData(col, FdoMetaDataNames.FDO_GEOMETRY_READONLY))
                throw new ArgumentException("Column does not have the required metadata");

            return Convert.ToBoolean(col.ExtendedProperties[FdoMetaDataNames.FDO_GEOMETRY_READONLY]);
        }

        public static bool IsAutoGenerated(DataColumn col)
        {
            if (!HasMetaData(col, FdoMetaDataNames.FDO_DATA_AUTOGENERATED))
                throw new ArgumentException("Column does not have the required metadata");

            return Convert.ToBoolean(col.ExtendedProperties[FdoMetaDataNames.FDO_DATA_AUTOGENERATED]);
        }

        public static DataType GetDataType(DataColumn col)
        {
            if (!HasMetaData(col, FdoMetaDataNames.FDO_DATA_TYPE))
                throw new ArgumentException("Column does not have the required metadata");

            return (DataType)Enum.Parse(typeof(DataType), col.ExtendedProperties[FdoMetaDataNames.FDO_DATA_TYPE].ToString());
        }

        public static bool IsNullable(DataColumn col)
        {
            if (!HasMetaData(col, FdoMetaDataNames.FDO_DATA_NULLABLE))
                throw new ArgumentException("Column does not have the required metadata");

            return Convert.ToBoolean(col.ExtendedProperties[FdoMetaDataNames.FDO_DATA_NULLABLE]);
        }

        public static bool IsReadOnly(DataColumn col)
        {
            if (!HasMetaData(col, FdoMetaDataNames.FDO_DATA_READONLY))
                throw new ArgumentException("Column does not have the required metadata");

            return Convert.ToBoolean(col.ExtendedProperties[FdoMetaDataNames.FDO_DATA_READONLY]);
        }

        public static string GetDefaultValue(DataColumn col)
        {
            if (!HasMetaData(col, FdoMetaDataNames.FDO_DATA_DEFAULT_VALUE))
                throw new ArgumentException("Column does not have the required metadata");

            return col.ExtendedProperties[FdoMetaDataNames.FDO_DATA_DEFAULT_VALUE].ToString();
        }

        public static int GetLength(DataColumn col)
        {
            if (!HasMetaData(col, FdoMetaDataNames.FDO_DATA_LENGTH))
                throw new ArgumentException("Column does not have the required metadata");

            return Convert.ToInt32(col.ExtendedProperties[FdoMetaDataNames.FDO_DATA_LENGTH]);
        }

        public static int GetScale(DataColumn col)
        {
            if (!HasMetaData(col, FdoMetaDataNames.FDO_DATA_SCALE))
                throw new ArgumentException("Column does not have the required metadata");

            return Convert.ToInt32(col.ExtendedProperties[FdoMetaDataNames.FDO_DATA_SCALE]);
        }

        public static int GetPrecision(DataColumn col)
        {
            if (!HasMetaData(col, FdoMetaDataNames.FDO_DATA_PRECISION))
                throw new ArgumentException("Column does not have the required metadata");

            return Convert.ToInt32(col.ExtendedProperties[FdoMetaDataNames.FDO_DATA_PRECISION]);
        }

        public static void SetMetaData(DataColumn col, string key, object value)
        {
            col.ExtendedProperties[key] = value;
        }
    }
}
