using System;
using System.Collections.Generic;
using System.Text;

namespace FdoToolbox.Core.ETL.Specialized
{
    using Operations;
    using System.Collections.Specialized;
    using OSGeo.FDO.Geometry;
    using OSGeo.FDO.Filter;
    using OSGeo.FDO.Spatial;
    using FdoToolbox.Core.ETL.Pipelines;
    using FdoToolbox.Core.Feature;
    using OSGeo.FDO.Schema;

    /// <summary>
    /// A specialized form of <see cref="EtlProcess"/> that merges
    /// two feature classes into one. The merged class is created
    /// before commencing the join
    /// </summary>
    public class FdoJoin : FdoSpecializedEtlProcess
    {
        private FdoJoinOptions _options;

        /// <summary>
        /// Constructor
        /// </summary>
        /// <param name="options"></param>
        public FdoJoin(FdoJoinOptions options) { _options = options; }

        /// <summary>
        /// Initializes this instance.
        /// </summary>
        protected override void Initialize()
        {
            _options.Validate();

            ConcreteJoin join = new ConcreteJoin(_options.JoinType);

            SendMessage("Setting up left and right sides of the join");

            //Set up left and right sides of the join
            FdoInputOperation left = new FdoInputOperation(_options.Left.Connection, _options.CreateLeftQuery());
            FdoInputOperation right = new FdoInputOperation(_options.Right.Connection, _options.CreateRightQuery());
            join.Left(left);
            join.Right(right);
            foreach (string leftProp in _options.JoinPairs.Keys)
            {
                join.AddAttributeJoinCondition(leftProp, _options.JoinPairs[leftProp]);
            }
            if (_options.SpatialJoinPredicate.HasValue)
                join.SpatialPredicate = _options.SpatialJoinPredicate.Value;
            join.PrepareForExecution(new SingleThreadedPipelineExecuter());

            IFdoOperation output = null;
            
            //Create target class. The schema must already exist, but the class must *not* already exist.
            using (FdoFeatureService service = _options.Target.Connection.CreateFeatureService())
            {
                if (!service.SupportsCommand(OSGeo.FDO.Commands.CommandType.CommandType_ApplySchema))
                    throw new FdoETLException(ResourceUtil.GetStringFormatted("ERR_UNSUPPORTED_CMD", OSGeo.FDO.Commands.CommandType.CommandType_ApplySchema));

                //Get target schema
                FeatureSchema schema = service.GetSchemaByName(_options.Target.SchemaName);
                if (schema == null)
                    throw new FdoETLException(ResourceUtil.GetString("ERR_JOIN_SCHEMA_NOT_FOUND"));

                //Check target class does not exist
                int cidx = schema.Classes.IndexOf(_options.Target.ClassName);
                if (cidx >= 0)
                    throw new FdoETLException(ResourceUtil.GetString("ERR_JOIN_TARGET_EXISTS"));


                SendMessageFormatted("Creating joined class: {0}", _options.Target.ClassName);
                //Create target class
                ClassDefinition cd = CreateJoinedFeatureClass();
                schema.Classes.Add(cd);

                SendMessageFormatted("Applying altered schema: {0}", _options.Target.SchemaName);

                //Apply altered schema
                service.ApplySchema(schema);

                //Check batch support
                if (_options.BatchSize > 0 && !service.SupportsBatchInsertion())
                {
                    SendMessage("Batch insert not supported. Using regular inserts");
                    _options.BatchSize = 0;
                }
            }

            if (_options.BatchSize > 0)
                output = new FdoBatchedOutputOperation(_options.Target.Connection, _options.Target.ClassName, _options.BatchSize);
            else
                output = new FdoOutputOperation(_options.Target.Connection, _options.Target.ClassName);

            //Register operations
            Register(join);
            Register(output);
        }

        private ClassDefinition CreateJoinedFeatureClass()
        {
            FeatureClass fc = new FeatureClass(_options.Target.ClassName, string.Empty);

            //Create identity property
            DataPropertyDefinition id = new DataPropertyDefinition("Autogenerated_ID", "Automatically generated ID");
            id.DataType = DataType.DataType_Int32;
            id.IsAutoGenerated = true;
            id.Nullable = false;

            fc.Properties.Add(id);
            fc.IdentityProperties.Add(id);

            using (FdoFeatureService leftService = _options.Left.Connection.CreateFeatureService())
            using (FdoFeatureService rightService = _options.Right.Connection.CreateFeatureService())
            {
                ClassDefinition leftClass = leftService.GetClassByName(_options.Left.SchemaName, _options.Left.ClassName);
                ClassDefinition rightClass = rightService.GetClassByName(_options.Right.SchemaName, _options.Right.ClassName);

                if (leftClass == null)
                    throw new FdoETLException(ResourceUtil.GetStringFormatted("ERR_JOIN_LEFT_CLASS_NOT_FOUND", _options.Left.ClassName));
                if (rightClass == null)
                    throw new FdoETLException(ResourceUtil.GetStringFormatted("ERR_JOIN_RIGHT_CLASS_NOT_FOUND", _options.Right.ClassName));

                foreach (string leftProp in _options.LeftProperties)
                {
                    int pidx = leftClass.Properties.IndexOf(leftProp);
                    if (pidx >= 0)
                    {
                        PropertyDefinition pd = FdoFeatureService.CloneProperty(leftClass.Properties[pidx]);
                        if (!string.IsNullOrEmpty(_options.LeftPrefix))
                            pd.Name = _options.LeftPrefix + pd.Name;

                        fc.Properties.Add(pd);
                    }
                    else
                        throw new FdoETLException(ResourceUtil.GetStringFormatted("ERR_JOIN_LEFT_PROPERTY_NOT_FOUND", leftProp));
                }

                foreach (string rightProp in _options.RightProperties)
                {
                    int pidx = rightClass.Properties.IndexOf(rightProp);
                    if (pidx >= 0)
                    {
                        PropertyDefinition pd = FdoFeatureService.CloneProperty(rightClass.Properties[pidx]);
                        if (!string.IsNullOrEmpty(_options.RightPrefix))
                            pd.Name = _options.RightPrefix + pd.Name;

                        fc.Properties.Add(pd);
                    }
                    else
                        throw new FdoETLException(ResourceUtil.GetStringFormatted("ERR_JOIN_RIGHT_PROPERTY_NOT_FOUND", rightProp));
                }

                //Set designated geometry if specified
                if (!string.IsNullOrEmpty(_options.GeometryProperty))
                {
                    int pidx = fc.Properties.IndexOf(_options.GeometryProperty);
                    if (pidx < 0)
                        throw new FdoETLException(ResourceUtil.GetStringFormatted("ERR_JOIN_TARGET_GEOMETRY_PROPERTY_NOT_FOUND"));

                    PropertyDefinition pd = fc.Properties[pidx];
                    if (pd.PropertyType != PropertyType.PropertyType_GeometricProperty)
                        throw new FdoETLException(ResourceUtil.GetStringFormatted("ERR_JOIN_NOT_TARGET_GEOMETRY_PROPERTY", _options.GeometryProperty));

                    //Set geometry property
                    fc.GeometryProperty = (GeometricPropertyDefinition)pd;
                }
            }

            return fc;
        }

        /// <summary>
        /// Called when [feature processed].
        /// </summary>
        /// <param name="op">The op.</param>
        /// <param name="dictionary">The dictionary.</param>
        protected override void OnFeatureProcessed(FdoOperationBase op, FdoRow dictionary)
        {
            if (op.Statistics.OutputtedRows % 50 == 0)
            {
                if (op is FdoOutputOperation)
                {
                    string className = (op as FdoOutputOperation).ClassName;
                    SendMessageFormatted("[Join => {0}]: {1} features written", className, op.Statistics.OutputtedRows);
                }
            }
        }

        /// <summary>
        /// Called when [finished processing].
        /// </summary>
        /// <param name="op">The op.</param>
        protected override void OnFinishedProcessing(FdoOperationBase op)
        {
            if (op is FdoOutputOperation)
            {
                string className = (op as FdoOutputOperation).ClassName;
                SendMessageFormatted("[Join => {0}]: {1} features written in {2}", className, op.Statistics.OutputtedRows, op.Statistics.Duration.ToString());
            }
        }

        /// <summary>
        /// Inner specialized implementation of join operation
        /// </summary>
        class ConcreteJoin : FdoNestedLoopsJoinOperation
        {
            FdoJoinType joinType;
            NameValueCollection attributePairs;
            SpatialOperations? spatialJoinPredicate;

            /// <summary>
            /// Initializes a new instance of the <see cref="ConcreteJoin"/> class.
            /// </summary>
            /// <param name="joinType">Type of the join.</param>
            public ConcreteJoin(FdoJoinType joinType)
            {
                this.attributePairs = new NameValueCollection();
                this.joinType = joinType;
            }

            /// <summary>
            /// Sets the spatial predicate.
            /// </summary>
            /// <value>The spatial predicate.</value>
            public SpatialOperations SpatialPredicate
            {
                set { spatialJoinPredicate = value; }
            }

            /// <summary>
            /// Adds the attribute join condition.
            /// </summary>
            /// <param name="leftProperty">The left property.</param>
            /// <param name="rightProperty">The right property.</param>
            public void AddAttributeJoinCondition(string leftProperty, string rightProperty)
            {
                this.attributePairs.Add(leftProperty, rightProperty);
            }

            protected override FdoRow MergeRows(FdoRow leftRow, FdoRow rightRow)
            {
                FdoRow row = new FdoRow();
                switch (joinType)
                {
                    case FdoJoinType.Inner:
                        {
                            throw new NotImplementedException();   
                        }
                    case FdoJoinType.Left:
                        {
                            row.Copy(leftRow);
                        }
                        break;
                    case FdoJoinType.Right:
                        {
                            row.Copy(rightRow);
                        }
                        break;
                }
                return row;
            }

            protected override bool MatchJoinCondition(FdoRow leftRow, FdoRow rightRow)
            {
                bool equals = false;
                foreach (string leftKey in this.attributePairs)
                {
                    string rightKey = this.attributePairs[leftKey];
                    switch (joinType)
                    {
                        case FdoJoinType.Inner:
                            equals = Equals(leftRow[leftKey], rightRow[rightKey]);
                            break;
                        case FdoJoinType.Left:
                            equals = Equals(leftRow[leftKey], rightRow[rightKey]) || rightRow[rightKey] == null;
                            break;
                        case FdoJoinType.Right:
                            equals = Equals(leftRow[leftKey], rightRow[rightKey]) || leftRow[leftKey] == null;
                            break;
                    }
                }
                //Only test spatial predicate if both rows have defined geometry fields
                if (this.spatialJoinPredicate.HasValue && leftRow.DefaultGeometryProperty != null && rightRow.DefaultGeometryProperty != null)
                {
                    equals = SpatialUtility.Evaluate(leftRow.Geometry, this.spatialJoinPredicate.Value, rightRow.Geometry);
                }
                return equals;
            }
        }
    }
}
