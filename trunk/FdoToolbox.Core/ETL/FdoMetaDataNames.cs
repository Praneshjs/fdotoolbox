#region LGPL Header
// Copyright (C) 2008, Jackie Ng
// http://code.google.com/p/fdotoolbox, jumpinjackie@gmail.com
// 
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
// 
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
// 
#endregion
using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using OSGeo.FDO.Schema;

namespace FdoToolbox.Core.ETL
{
    /// <summary>
    /// FDO Metadata utility class
    /// </summary>
    public sealed class FdoMetaDataNames
    {
        private FdoMetaDataNames() { }

        /// <summary>
        /// Class type
        /// </summary>
        public const string FDO_CLASS_TYPE = "FDO_CLASS_TYPE";
        /// <summary>
        /// Class description
        /// </summary>
        public const string FDO_CLASS_DESCRIPTION = "FDO_CLASS_DESCRIPTION";

        /// <summary>
        /// Feature class property
        /// </summary>
        public const string FDO_FEATURE_CLASS_GEOMETRY_PROPERTY = "FDO_FEATURE_CLASS_GEOMETRY_PROPERTY";

        /// <summary>
        /// Identity property
        /// </summary>
        public const string FDO_IDENTITY_PROPERTY = "FDO_IDENTITY_PROPERTY";

        /// <summary>
        /// Property type
        /// </summary>
        public const string FDO_PROPERTY_TYPE = "FDO_PROPERTY_TYPE";

        /// <summary>
        /// System property
        /// </summary>
        public const string FDO_SYSTEM_PROPERTY = "FDO_SYSTEM_PROPERTY";

        /// <summary>
        /// FDO Data Type
        /// </summary>
        public const string FDO_DATA_TYPE = "FDO_DATA_TYPE";
        /// <summary>
        /// FDO autogenerated property
        /// </summary>
        public const string FDO_DATA_AUTOGENERATED = "FDO_DATA_AUTOGENERATED";
        /// <summary>
        /// FDO nullable property
        /// </summary>
        public const string FDO_DATA_NULLABLE = "FDO_DATA_NULLABLE";
        /// <summary>
        /// FDO readonly property
        /// </summary>
        public const string FDO_DATA_READONLY = "FDO_DATA_READONLY";
        /// <summary>
        /// FDO length property
        /// </summary>
        public const string FDO_DATA_LENGTH = "FDO_DATA_LENGTH";
        /// <summary>
        /// FDO default value property
        /// </summary>
        public const string FDO_DATA_DEFAULT_VALUE = "FDO_DATA_DEFAULT_VALUE";
        /// <summary>
        /// FDO scale property
        /// </summary>
        public const string FDO_DATA_SCALE = "FDO_DATA_SCALE";
        /// <summary>
        /// FDO precision property
        /// </summary>
        public const string FDO_DATA_PRECISION = "FDO_DATA_PRECISION";

        /// <summary>
        /// FDO geometry property
        /// </summary>
        public const string FDO_GEOMETRY_PROPERTY = "FDO_GEOMETRY_PROPERTY";
        /// <summary>
        /// FDO geometry type property
        /// </summary>
        public const string FDO_GEOMETRY_TYPE = "FDO_GEOMETRY_PROPERTY_TYPE";
        /// <summary>
        /// FDO elevation property
        /// </summary>
        public const string FDO_GEOMETRY_HAS_ELEVATION = "FDO_GEOMETRY_PROPERTY_HAS_ELEVATION";
        /// <summary>
        /// FDO measure property
        /// </summary>
        public const string FDO_GEOMETRY_HAS_MEASURE = "FDO_GEOMETRY_PROPERTY_HAS_MEASURE";
        /// <summary>
        /// FDO geometry readonly property
        /// </summary>
        public const string FDO_GEOMETRY_READONLY = "FDO_GEOMETRY_PROPERTY_READONLY";
        /// <summary>
        /// FDO spatial context association property
        /// </summary>
        public const string FDO_GEOMETRY_SPATIAL_CONTEXT = "FDO_GEOMETRY_SPATIAL_CONTEXT";
    }

    /// <summary>
    /// Helper class to apply FDO specific metadata to standard DataTables
    /// </summary>
    public sealed class FdoMetaData
    {
        private FdoMetaData() { }

        /// <summary>
        /// Determines if this column has FDO geometry property metadata applied
        /// </summary>
        /// <param name="col"></param>
        /// <returns></returns>
        public static bool IsGeometryProperty(DataColumn col)
        {
            return col.ExtendedProperties[FdoMetaDataNames.FDO_GEOMETRY_PROPERTY] != null;
        }

        /// <summary>
        /// Determines if this column has FDO identity property metadata applied
        /// </summary>
        /// <param name="col"></param>
        /// <returns></returns>
        public static bool IsIdentityProperty(DataColumn col)
        {
            return col.ExtendedProperties[FdoMetaDataNames.FDO_IDENTITY_PROPERTY] != null;
        }

        /// <summary>
        /// Returns true if the DataColumn has metadata for a given key
        /// </summary>
        /// <param name="col"></param>
        /// <param name="key"></param>
        /// <returns></returns>
        public static bool HasMetaData(DataColumn col, string key)
        {
            return col.ExtendedProperties[key] != null;
        }

        /// <summary>
        /// Returns true if the DataTable has metadata for a given key
        /// </summary>
        /// <param name="table"></param>
        /// <param name="key"></param>
        /// <returns></returns>
        public static bool HasMetaData(DataTable table, string key)
        {
            return table.ExtendedProperties[key] != null;
        }

        /// <summary>
        /// Gets the FDO geometry type metadata
        /// </summary>
        /// <param name="col"></param>
        /// <returns></returns>
        public static int GetGeometryType(DataColumn col)
        {
            if (!HasMetaData(col, FdoMetaDataNames.FDO_GEOMETRY_TYPE))
                throw new ArgumentException("Column does not have the required metadata");
            return Convert.ToInt32(col.ExtendedProperties[FdoMetaDataNames.FDO_GEOMETRY_TYPE]);
        }

        /// <summary>
        /// Gets the FDO elevation metadata
        /// </summary>
        /// <param name="col"></param>
        /// <returns></returns>
        public static bool HasElevation(DataColumn col)
        {
            if (!HasMetaData(col, FdoMetaDataNames.FDO_GEOMETRY_HAS_ELEVATION))
                throw new ArgumentException("Column does not have the required metadata");
            return Convert.ToBoolean(col.ExtendedProperties[FdoMetaDataNames.FDO_GEOMETRY_HAS_ELEVATION]);
        }

        /// <summary>
        /// Gets the FDO measure metadata
        /// </summary>
        /// <param name="col"></param>
        /// <returns></returns>
        public static bool HasMeasure(DataColumn col)
        {
            if (!HasMetaData(col, FdoMetaDataNames.FDO_GEOMETRY_HAS_MEASURE))
                throw new ArgumentException("Column does not have the required metadata");

            return Convert.ToBoolean(col.ExtendedProperties[FdoMetaDataNames.FDO_GEOMETRY_HAS_MEASURE]);
        }

        /// <summary>
        /// Gets the FDO geometry readonly metadata
        /// </summary>
        /// <param name="col"></param>
        /// <returns></returns>
        public static bool IsGeometryReadOnly(DataColumn col)
        {
            if (!HasMetaData(col, FdoMetaDataNames.FDO_GEOMETRY_READONLY))
                throw new ArgumentException("Column does not have the required metadata");

            return Convert.ToBoolean(col.ExtendedProperties[FdoMetaDataNames.FDO_GEOMETRY_READONLY]);
        }

        /// <summary>
        /// Gets the FDO IsAutoGenerated metadata
        /// </summary>
        /// <param name="col"></param>
        /// <returns></returns>
        public static bool IsAutoGenerated(DataColumn col)
        {
            if (!HasMetaData(col, FdoMetaDataNames.FDO_DATA_AUTOGENERATED))
                throw new ArgumentException("Column does not have the required metadata");

            return Convert.ToBoolean(col.ExtendedProperties[FdoMetaDataNames.FDO_DATA_AUTOGENERATED]);
        }

        /// <summary>
        /// Gets the FDO data type metadata
        /// </summary>
        /// <param name="col"></param>
        /// <returns></returns>
        public static DataType GetDataTypeForColumn(DataColumn col)
        {
            if (!HasMetaData(col, FdoMetaDataNames.FDO_DATA_TYPE))
                throw new ArgumentException("Column does not have the required metadata");

            return (DataType)Enum.Parse(typeof(DataType), col.ExtendedProperties[FdoMetaDataNames.FDO_DATA_TYPE].ToString());
        }

        /// <summary>
        /// Gets the FDO nullable metadata
        /// </summary>
        /// <param name="col"></param>
        /// <returns></returns>
        public static bool IsNullable(DataColumn col)
        {
            if (!HasMetaData(col, FdoMetaDataNames.FDO_DATA_NULLABLE))
                throw new ArgumentException("Column does not have the required metadata");

            return Convert.ToBoolean(col.ExtendedProperties[FdoMetaDataNames.FDO_DATA_NULLABLE]);
        }

        /// <summary>
        /// Gets the FDO readonly metadata
        /// </summary>
        /// <param name="col"></param>
        /// <returns></returns>
        public static bool IsReadOnly(DataColumn col)
        {
            if (!HasMetaData(col, FdoMetaDataNames.FDO_DATA_READONLY))
                throw new ArgumentException("Column does not have the required metadata");

            return Convert.ToBoolean(col.ExtendedProperties[FdoMetaDataNames.FDO_DATA_READONLY]);
        }

        /// <summary>
        /// Gets the FDO default value metadata
        /// </summary>
        /// <param name="col"></param>
        /// <returns></returns>
        public static string GetDefaultValue(DataColumn col)
        {
            if (!HasMetaData(col, FdoMetaDataNames.FDO_DATA_DEFAULT_VALUE))
                throw new ArgumentException("Column does not have the required metadata");

            return col.ExtendedProperties[FdoMetaDataNames.FDO_DATA_DEFAULT_VALUE].ToString();
        }

        /// <summary>
        /// Gets the FDO length metadata
        /// </summary>
        /// <param name="col"></param>
        /// <returns></returns>
        public static int GetLength(DataColumn col)
        {
            if (!HasMetaData(col, FdoMetaDataNames.FDO_DATA_LENGTH))
                throw new ArgumentException("Column does not have the required metadata");

            return Convert.ToInt32(col.ExtendedProperties[FdoMetaDataNames.FDO_DATA_LENGTH]);
        }

        /// <summary>
        /// Gets the FDO scale metadata
        /// </summary>
        /// <param name="col"></param>
        /// <returns></returns>
        public static int GetScale(DataColumn col)
        {
            if (!HasMetaData(col, FdoMetaDataNames.FDO_DATA_SCALE))
                throw new ArgumentException("Column does not have the required metadata");

            return Convert.ToInt32(col.ExtendedProperties[FdoMetaDataNames.FDO_DATA_SCALE]);
        }

        /// <summary>
        /// Gets the FDO precision metadata
        /// </summary>
        /// <param name="col"></param>
        /// <returns></returns>
        public static int GetPrecision(DataColumn col)
        {
            if (!HasMetaData(col, FdoMetaDataNames.FDO_DATA_PRECISION))
                throw new ArgumentException("Column does not have the required metadata");

            return Convert.ToInt32(col.ExtendedProperties[FdoMetaDataNames.FDO_DATA_PRECISION]);
        }

        /// <summary>
        /// Sets a metadata value
        /// </summary>
        /// <param name="col"></param>
        /// <param name="key"></param>
        /// <param name="value"></param>
        public static void SetMetaData(DataColumn col, string key, object value)
        {
            col.ExtendedProperties[key] = value;
        }

        /// <summary>
        /// Sets a metadata value
        /// </summary>
        /// <param name="table"></param>
        /// <param name="key"></param>
        /// <param name="value"></param>
        public static void SetMetaData(DataTable table, string key, object value)
        {
            table.ExtendedProperties[key] = value;
        }

        /// <summary>
        /// Gets the CLR type for a FDO data type
        /// </summary>
        /// <param name="dataType"></param>
        /// <returns></returns>
        private static Type GetDataTypeForProperty(DataType dataType)
        {
            switch(dataType)
            {
                case DataType.DataType_BLOB:
                    return typeof(byte[]);
                case DataType.DataType_Boolean:
                    return typeof(bool);
                case DataType.DataType_Byte:
                    return typeof(byte);
                case DataType.DataType_CLOB:
                    return typeof(char[]);
                case DataType.DataType_DateTime:
                    return typeof(DateTime);
                case DataType.DataType_Decimal:
                    return typeof(decimal);
                case DataType.DataType_Double:
                    return typeof(double);
                case DataType.DataType_Int16:
                    return typeof(short);
                case DataType.DataType_Int32:
                    return typeof(int);
                case DataType.DataType_Int64:
                    return typeof(long);
                case DataType.DataType_Single:
                    return typeof(float);
                case DataType.DataType_String:
                    return typeof(string);
            }
            //Should never get to here
            throw new ArgumentException("Unable to find corresponding type for DataType: " + dataType);
        }

        /// <summary>
        /// Applies FDO metadata to a DataTable
        /// </summary>
        /// <param name="table"></param>
        /// <param name="classDef"></param>
        public static void ApplyFdoMetaData(DataTable table, ClassDefinition classDef)
        {
            foreach (DataColumn col in table.Columns)
            {
                int pidx = classDef.Properties.IndexOf(col.ColumnName);
                if (pidx >= 0)
                {
                    PropertyDefinition pd = classDef.Properties[pidx];
                    switch (pd.PropertyType)
                    {
                        case PropertyType.PropertyType_DataProperty:
                            {
                                DataPropertyDefinition dp = pd as DataPropertyDefinition;
                                SetMetaData(col, FdoMetaDataNames.FDO_DATA_AUTOGENERATED, dp.IsAutoGenerated);
                                SetMetaData(col, FdoMetaDataNames.FDO_DATA_DEFAULT_VALUE, dp.DefaultValue);
                                SetMetaData(col, FdoMetaDataNames.FDO_DATA_TYPE, dp.DataType);
                                SetMetaData(col, FdoMetaDataNames.FDO_DATA_LENGTH, dp.Length);
                                SetMetaData(col, FdoMetaDataNames.FDO_DATA_NULLABLE, dp.Nullable);
                                SetMetaData(col, FdoMetaDataNames.FDO_DATA_READONLY, dp.ReadOnly);
                                SetMetaData(col, FdoMetaDataNames.FDO_DATA_SCALE, dp.Scale);
                                SetMetaData(col, FdoMetaDataNames.FDO_DATA_PRECISION, dp.Precision);
                                if (classDef.IdentityProperties.Contains(dp))
                                    SetMetaData(col, FdoMetaDataNames.FDO_IDENTITY_PROPERTY, true);
                            }
                            break;
                        case PropertyType.PropertyType_GeometricProperty:
                            {
                                GeometricPropertyDefinition gp = pd as GeometricPropertyDefinition;
                                SetMetaData(col, FdoMetaDataNames.FDO_GEOMETRY_PROPERTY, true);
                                SetMetaData(col, FdoMetaDataNames.FDO_GEOMETRY_TYPE, gp.GeometryTypes);
                                SetMetaData(col, FdoMetaDataNames.FDO_GEOMETRY_READONLY, gp.ReadOnly);
                                SetMetaData(col, FdoMetaDataNames.FDO_GEOMETRY_HAS_ELEVATION, gp.HasElevation);
                                SetMetaData(col, FdoMetaDataNames.FDO_GEOMETRY_HAS_MEASURE, gp.HasMeasure);
                            }
                            break;
                    }
                }
            }

            if (classDef is FeatureClass)
            {
                GeometricPropertyDefinition gp = (classDef as FeatureClass).GeometryProperty;
                if(gp != null)
                    SetMetaData(table, FdoMetaDataNames.FDO_FEATURE_CLASS_GEOMETRY_PROPERTY, gp.Name);
            }
        }

        /// <summary>
        /// Gets the metadata value 
        /// </summary>
        /// <param name="table"></param>
        /// <param name="key"></param>
        /// <returns></returns>
        public static object GetMetaData(DataTable table, string key)
        {
            return table.ExtendedProperties[key];
        }

        /// <summary>
        /// Gets the metadata value
        /// </summary>
        /// <param name="col"></param>
        /// <param name="key"></param>
        /// <returns></returns>
        public static object GetMetaData(DataColumn col, string key)
        {
            return col.ExtendedProperties[key];
        }

        /// <summary>
        /// Gets the metadata value
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="col"></param>
        /// <param name="key"></param>
        /// <returns></returns>
        public static T GetMetaData<T>(DataColumn col, string key)
        {
            return (T)col.ExtendedProperties[key];
        }

        /// <summary>
        /// Gets the metadata value
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="table"></param>
        /// <param name="key"></param>
        /// <returns></returns>
        public static T GetMetaData<T>(DataTable table, string key)
        {
            return (T)table.ExtendedProperties[key];
        }
    }
}
