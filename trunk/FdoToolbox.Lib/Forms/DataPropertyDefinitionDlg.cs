#region LGPL Header
// Copyright (C) 2008, Jackie Ng
// http://code.google.com/p/fdotoolbox, jumpinjackie@gmail.com
// 
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
// 
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
// 
#endregion
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using OSGeo.FDO.Schema;
using OSGeo.FDO.Connections;
using FdoToolbox.Lib.Controls;
using FdoToolbox.Lib.ClientServices;
using FdoToolbox.Core.Common;
using OSGeo.FDO.Expression;
using FdoToolbox.Core.ClientServices;

namespace FdoToolbox.Lib.Forms
{
    public partial class DataPropertyDefinitionDlg : Form
    {
        private FdoConnectionInfo _BoundConnection;

        internal DataPropertyDefinitionDlg(FdoConnectionInfo conn)
        {
            InitializeComponent();
            _BoundConnection = conn;
            _Definition = new DataPropertyDefinition(txtName.Text, txtDescription.Text);
            
            //Toggle UI based on capabilities
            ToggleUI();
        }

        private void ToggleUI()
        {
            cmbDataType.DataSource = this.BoundConnection.InternalConnection.SchemaCapabilities.DataTypes;
            chkNullable.Enabled = this.BoundConnection.InternalConnection.SchemaCapabilities.SupportsNullValueConstraints;
            chkAutoGenerated.Enabled = this.BoundConnection.InternalConnection.SchemaCapabilities.SupportsAutoIdGeneration;
            txtDefault.Enabled = this.BoundConnection.InternalConnection.SchemaCapabilities.SupportsDefaultValue;

            if (this.BoundConnection.InternalConnection.SchemaCapabilities.get_NameSizeLimit(OSGeo.FDO.Connections.Capabilities.SchemaElementNameType.SchemaElementNameType_Property) > 0)
                txtName.MaxLength = this.BoundConnection.InternalConnection.SchemaCapabilities.get_NameSizeLimit(OSGeo.FDO.Connections.Capabilities.SchemaElementNameType.SchemaElementNameType_Property);

            if (this.BoundConnection.InternalConnection.SchemaCapabilities.get_NameSizeLimit(OSGeo.FDO.Connections.Capabilities.SchemaElementNameType.SchemaElementNameType_Description) > 0)
                txtDescription.MaxLength = this.BoundConnection.InternalConnection.SchemaCapabilities.get_NameSizeLimit(OSGeo.FDO.Connections.Capabilities.SchemaElementNameType.SchemaElementNameType_Description);

            if (this.BoundConnection.InternalConnection.SchemaCapabilities.MaximumDecimalPrecision > 0)
                numPrecision.Maximum = this.BoundConnection.InternalConnection.SchemaCapabilities.MaximumDecimalPrecision;

            if (this.BoundConnection.InternalConnection.SchemaCapabilities.MaximumDecimalScale > 0)
                numScale.Maximum = this.BoundConnection.InternalConnection.SchemaCapabilities.MaximumDecimalScale;

            cmbConstraintType.Items.Clear();
            cmbConstraintType.Items.Add("(None)");
            if (this.BoundConnection.InternalConnection.SchemaCapabilities.SupportsValueConstraintsList)
                cmbConstraintType.Items.Add(PropertyValueConstraintType.PropertyValueConstraintType_List);
            if (this.BoundConnection.InternalConnection.SchemaCapabilities.SupportsExclusiveValueRangeConstraints)
                cmbConstraintType.Items.Add(PropertyValueConstraintType.PropertyValueConstraintType_Range);

            cmbConstraintType.SelectedIndex = 0;
        }

        internal DataPropertyDefinitionDlg(DataPropertyDefinition def, FdoConnectionInfo conn) : this(conn)
        {
            _Definition = def;
            txtName.Text = _Definition.Name;
            txtDescription.Text = _Definition.Description;
            txtDefault.Text = _Definition.DefaultValue;
            cmbDataType.SelectedItem = _Definition.DataType;
            chkAutoGenerated.Checked = _Definition.IsAutoGenerated;
            chkNullable.Checked = _Definition.Nullable;
            chkReadOnly.Checked = _Definition.ReadOnly;
            chkSystem.Checked = _Definition.IsSystem;
            numLength.Value = Convert.ToDecimal(_Definition.Length);
            numPrecision.Value = Convert.ToDecimal(_Definition.Precision);
            numScale.Value = Convert.ToDecimal(_Definition.Scale);
            if (def.ValueConstraint != null)
            {
                int idx = cmbConstraintType.Items.IndexOf(def.ValueConstraint.ConstraintType);
                if (idx > 0)
                {
                    cmbConstraintType.SelectedIndex = idx;
                    if (def.ValueConstraint.ConstraintType == PropertyValueConstraintType.PropertyValueConstraintType_List)
                    {
                        ValueListConstraintCtl ctl = (ValueListConstraintCtl)pnConstraint.Controls[0];
                        List<string> values = new List<string>();
                        DataValueCollection listValues = (def.ValueConstraint as PropertyValueConstraintList).ConstraintList;
                        foreach (DataValue dv in listValues)
                        {
                            switch (dv.DataType)
                            {
                                case DataType.DataType_Byte:
                                    values.Add((dv as ByteValue).Byte.ToString());
                                    break;
                                case DataType.DataType_DateTime:
                                    values.Add((dv as DateTimeValue).DateTime.ToString());
                                    break;
                                case DataType.DataType_Decimal:
                                    values.Add((dv as DecimalValue).Decimal.ToString());
                                    break;
                                case DataType.DataType_Double:
                                    values.Add((dv as DoubleValue).Double.ToString());
                                    break;
                                case DataType.DataType_Int16:
                                    values.Add((dv as Int16Value).Int16.ToString());
                                    break;
                                case DataType.DataType_Int32:
                                    values.Add((dv as Int32Value).Int32.ToString());
                                    break;
                                case DataType.DataType_Int64:
                                    values.Add((dv as Int64Value).Int64.ToString());
                                    break;
                                case DataType.DataType_Single:
                                    values.Add((dv as SingleValue).Single.ToString());
                                    break;
                                case DataType.DataType_String:
                                    values.Add((dv as StringValue).String);
                                    break;
                            }
                        }
                        ctl.SetItems(values.ToArray());
                    }
                    else if (def.ValueConstraint.ConstraintType == PropertyValueConstraintType.PropertyValueConstraintType_Range)
                    {
                        PropertyValueConstraintRange range = (def.ValueConstraint as PropertyValueConstraintRange);
                        ValueRangeConstraintCtl ctl = (ValueRangeConstraintCtl)pnConstraint.Controls[0];
                        ctl.IsMaxInclusive = range.MaxInclusive;
                        ctl.IsMinInclusive = range.MinInclusive;
                        ctl.MaxValue = range.MaxValue;
                        ctl.MinValue = range.MinValue;
                    }
                }
            }
        }

        private DataPropertyDefinition _Definition;

        public static DataPropertyDefinition NewDataProperty(FdoConnectionInfo conn)
        {
            DataPropertyDefinitionDlg dlg = new DataPropertyDefinitionDlg(conn);
            if (dlg.ShowDialog() == DialogResult.OK)
            {
                return dlg._Definition;
            }
            return null;
        }

        public static void EditDataProperty(DataPropertyDefinition def, FdoConnectionInfo conn)
        {
            DataPropertyDefinitionDlg dlg = new DataPropertyDefinitionDlg(def, conn);
            dlg.ShowDialog();
        }

        private void btnOK_Click(object sender, EventArgs e)
        {
            errorProvider.Clear();
            if (string.IsNullOrEmpty(txtName.Text))
            {
                errorProvider.SetError(txtName, "Required");
                return;
            }
            
            DataType dtype = (DataType)cmbDataType.SelectedItem;
            if (dtype == DataType.DataType_BLOB ||
                dtype == DataType.DataType_CLOB ||
                dtype == DataType.DataType_String)
            {
                if (numLength.Value == 0)
                {
                    errorProvider.SetError(numLength, "Zero-length string, BLOB or CLOB");
                    return;
                }
            }
            if (dtype == DataType.DataType_BLOB ||
                dtype == DataType.DataType_CLOB ||
                dtype == DataType.DataType_Boolean)
            {
                if (cmbConstraintType.SelectedIndex > 0)
                {
                    errorProvider.SetError(cmbConstraintType, "Cannot have constraints on BLOB, CLOB or Boolean");
                    return;
                }
            }
            if (dtype == DataType.DataType_Decimal)
            {
                //Check zero length precision/scale
                if (numPrecision.Value == 0)
                {
                    errorProvider.SetError(numPrecision, "Zero precision");
                    return;
                }
                if (numScale.Value == 0)
                {
                    errorProvider.SetError(numScale, "Zero scale");
                    return;
                }
            }

            //Set the class
            _Definition.Name = txtName.Text;
            _Definition.Description = txtDescription.Text;
            _Definition.IsAutoGenerated = chkAutoGenerated.Checked;
            _Definition.IsSystem = chkSystem.Checked;
            _Definition.Nullable = chkNullable.Checked;
            _Definition.ReadOnly = chkReadOnly.Checked;
            _Definition.DataType = dtype;
            _Definition.DefaultValue = txtDefault.Text;
            _Definition.Scale = Convert.ToInt32(numScale.Value);
            _Definition.Precision = Convert.ToInt32(numPrecision.Value);
            _Definition.Length = Convert.ToInt32(numLength.Value);
            _Definition.ValueConstraint = GetConstraint();
            this.DialogResult = DialogResult.OK;
        }

        private void btnCancel_Click(object sender, EventArgs e)
        {
            this.DialogResult = DialogResult.Cancel;
        }

        private void chkAutoGenerated_CheckedChanged(object sender, EventArgs e)
        {
            if (chkAutoGenerated.Checked)
            {
                DataType dtype = (DataType)(cmbDataType.SelectedItem);
                if (Array.IndexOf<DataType>(this.BoundConnection.InternalConnection.SchemaCapabilities.SupportedAutoGeneratedTypes, dtype) < 0)
                {
                    AppConsole.Alert("Error", "This data type does not support auto-generation");
                    chkAutoGenerated.Checked = false;
                }
                else
                {
                    chkReadOnly.Checked = true;
                    chkNullable.Checked = false;
                }
            }
        }

        private void chkReadOnly_CheckedChanged(object sender, EventArgs e)
        {
            if (!chkReadOnly.Checked && chkAutoGenerated.Checked)
            {
                AppConsole.Alert("", "An auto-generated proeprty must be read-only");
                chkReadOnly.Checked = true;
            }
        }

        private void chkNullable_CheckedChanged(object sender, EventArgs e)
        {
            if (chkNullable.Checked && chkAutoGenerated.Checked)
            {
                AppConsole.Alert("", "An auto-generated property cannot be nullable");
                chkNullable.Checked = false;
            }
        }

        private void cmbDataType_SelectedIndexChanged(object sender, EventArgs e)
        {
            DataType dtype = (DataType)(cmbDataType.SelectedItem);
            long max = this.BoundConnection.InternalConnection.SchemaCapabilities.get_MaximumDataValueLength(dtype);
            numLength.Maximum = (max < 0) ? long.MaxValue : max;
        }

        public FdoConnectionInfo BoundConnection
        {
            get { return _BoundConnection; }
        }


        public void SetName(string name)
        {
            this.BoundConnection.Name = name;
        }

        private PropertyValueConstraint GetConstraint()
        {
            if (cmbConstraintType.SelectedIndex > 0)
            {
                Control c = pnConstraint.Controls[0];
                ValueListConstraintCtl vlc = c as ValueListConstraintCtl;
                ValueRangeConstraintCtl vrc = c as ValueRangeConstraintCtl;
                if (vlc != null)
                {
                    PropertyValueConstraintList list = new PropertyValueConstraintList();
                    string[] items = vlc.GetItems();
                    foreach (string str in items)
                    {
                        DataType dt = (DataType)cmbDataType.SelectedItem;
                        DataValue value = null;
                        switch (dt)
                        {
                            case DataType.DataType_Byte:
                                value = new ByteValue(Convert.ToByte(str.Trim()));
                                break;
                            case DataType.DataType_DateTime:
                                value = new DateTimeValue(Convert.ToDateTime(str.Trim()));
                                break;
                            case DataType.DataType_Decimal:
                                value = new DecimalValue(Convert.ToDouble(str.Trim()));
                                break;
                            case DataType.DataType_Double:
                                value = new DoubleValue(Convert.ToDouble(str.Trim()));
                                break;
                            case DataType.DataType_Int16:
                                value = new Int16Value(Convert.ToInt16(str.Trim()));
                                break;
                            case DataType.DataType_Int32:
                                value = new Int32Value(Convert.ToInt32(str.Trim()));
                                break;
                            case DataType.DataType_Int64:
                                value = new Int64Value(Convert.ToInt64(str.Trim()));
                                break;
                            case DataType.DataType_Single:
                                value = new SingleValue(Convert.ToSingle(str.Trim()));
                                break;
                            case DataType.DataType_String:
                                value = new StringValue(Convert.ToString(str.Trim()));
                                break;
                        }
                        list.ConstraintList.Add(value);
                    }
                    return list;
                }
                else if (vrc != null)
                {
                    PropertyValueConstraintRange range = new PropertyValueConstraintRange();
                    range.MaxInclusive = vrc.IsMaxInclusive;
                    range.MinInclusive = vrc.IsMinInclusive;
                    range.MinValue = vrc.MinValue;
                    range.MaxValue = vrc.MaxValue;
                    return range;
                }
            }
            return null;
        }

        private void cmbConstraintType_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cmbConstraintType.SelectedIndex > 0)
            {
                Control c = null;
                PropertyValueConstraintType constraint = (PropertyValueConstraintType)cmbConstraintType.SelectedItem;
                if (constraint == PropertyValueConstraintType.PropertyValueConstraintType_List)
                {
                    c = new ValueListConstraintCtl();
                }
                else if (constraint == PropertyValueConstraintType.PropertyValueConstraintType_Range)
                {
                    ValueRangeConstraintCtl vrc = new ValueRangeConstraintCtl();
                    if (this.BoundConnection.InternalConnection.SchemaCapabilities.SupportsInclusiveValueRangeConstraints)
                        vrc.InclusiveValuesEnabled = true;
                    else
                        vrc.InclusiveValuesEnabled = false;
                    c = vrc;
                }
                if (c != null)
                {
                    c.Dock = DockStyle.Fill;
                    pnConstraint.Controls.Clear();
                    pnConstraint.Controls.Add(c);
                }
            }
            else
            {
                pnConstraint.Controls.Clear();
            }
        }
    }
}