#region LGPL Header
// Copyright (C) 2010, Jackie Ng
// http://code.google.com/p/fdotoolbox, jumpinjackie@gmail.com
// 
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
// 
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
// 
//
// See license.txt for more/additional licensing information
#endregion
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Text;
using System.Windows.Forms;

namespace FdoToolbox.DataStoreManager.Controls.SchemaDesigner
{
    public partial class DataPropertyCtrl : UserControl
    {
        public DataPropertyCtrl()
        {
            InitializeComponent();
            //Just set these to maximum allowed values, because FDO capabilities
            //doesn't even get these right
            numLength.Minimum = decimal.MinValue;
            numLength.Maximum = decimal.MaxValue;
            numPrecision.Minimum = decimal.MinValue;
            numPrecision.Maximum = decimal.MaxValue;
            numScale.Minimum = decimal.MinValue;
            numScale.Maximum = decimal.MaxValue;
        }

        private SchemaDesignContext _context;

        public DataPropertyCtrl(DataPropertyDefinitionDecorator p, SchemaDesignContext context, NodeUpdateHandler updater)
            : this()
        {
            _context = context;

            txtName.DataBindings.Add("Text", p, "Name");
            txtDescription.DataBindings.Add("Text", p, "Description");

            cmbDataType.DataSource = _context.SupportedDataTypes;
            cmbDataType.DataBindings.Add("SelectedItem", p, "DataType");

            chkReadOnly.DataBindings.Add("Checked", p, "ReadOnly");
            chkNullable.DataBindings.Add("Checked", p, "Nullable");

            numLength.DataBindings.Add("Value", p, "Length");
            numPrecision.DataBindings.Add("Value", p, "Precision");
            numScale.DataBindings.Add("Value", p, "Scale");

            chkAutogenerated.Checked = p.IsAutoGenerated;
            chkAutogenerated.CheckedChanged += (s, e) =>
            {
                if (chkAutogenerated.Checked)
                {
                    //Verify it is a supported autogenerated type
                    var types = _context.SupportedAutogenratedDataTypes;
                    if (Array.IndexOf(types, cmbDataType.SelectedItem) < 0)
                    {
                        chkAutogenerated.Checked = false;
                    }

                    //Auto-generation implies no nullability
                    chkNullable.Checked = false;
                }
                p.IsAutoGenerated = chkAutogenerated.Checked;
            };

            p.PropertyChanged += (s, evt) =>
            {
                if (evt.PropertyName == "Name")
                    updater();
            };
        }
    }
}
