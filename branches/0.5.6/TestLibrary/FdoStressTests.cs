#region LGPL Header
// Copyright (C) 2008, Jackie Ng
// http://code.google.com/p/fdotoolbox, jumpinjackie@gmail.com
// 
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
// 
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
// 
#endregion
using System;
using System.Collections.Generic;
using System.Text;
using NUnit.Framework;
using OSGeo.FDO.Commands.Feature;
using OSGeo.FDO.Connections;
using OSGeo.FDO.Schema;
using FdoToolbox.Core.ClientServices;
using OSGeo.FDO.Geometry;
using OSGeo.FDO.Expression;
using OSGeo.FDO.Commands;
using OSGeo.FDO.Common;
using FdoToolbox.Core;
using System.IO;

namespace FdoToolbox.Tests
{
    /*
     This test suite stress tests the FDO API mainly in the area
     of data insertion and retrieval.
     
     These tests will take time to execute and may not be guaranteed 
     to pass.
     
     This test suite is not run by default in the TestRunner.exe
     */

    [TestFixture(Description = "FDO API Stress Tests")]
    [Category("Stress")]
    public class FdoStressTests : BaseTest
    {
        [Test]
        public void TestGeometryLifecycle()
        {
            IInsert insert = null;
            ISelect select = null;
            IConnection conn = null;
            string file = "Test3.sdf";
            try
            {
                FeatureSchema schema = new FeatureSchema("Default", "");
                FeatureClass fc = new FeatureClass("Points", "");

                DataPropertyDefinition id = new DataPropertyDefinition("ID", "");
                id.DataType = DataType.DataType_Int32;
                id.IsAutoGenerated = true;

                fc.Properties.Add(id);
                fc.IdentityProperties.Add(id);

                GeometricPropertyDefinition geom = new GeometricPropertyDefinition("Geometry", "");
                geom.GeometryTypes = (int)GeometryType.GeometryType_Point;

                fc.Properties.Add(geom);
                schema.Classes.Add(fc);

                conn = ExpressUtility.ApplySchemaToNewSDF(schema, file);

                schema.Dispose();
                fc.Dispose();

                conn.Open();
                Assert.IsTrue(conn.ConnectionState == ConnectionState.ConnectionState_Open);

                using (FeatureService service = new FeatureService(conn))
                {
                    insert = service.CreateCommand<IInsert>(OSGeo.FDO.Commands.CommandType.CommandType_Insert);
                    insert.SetFeatureClassName("Points");
                    //Mass insert
                    for (int i = 0; i < int.MaxValue; i++)
                    {
                        insert.PropertyValues.Clear();
                        IDirectPosition pos = service.GeometryFactory.CreatePositionXY(0.0, 0.0);
                        IGeometry point = service.GeometryFactory.CreatePoint(pos);
                        GeometryValue geomVal = new GeometryValue(service.GeometryFactory.GetFgf(point));
                        PropertyValue propVal = new PropertyValue("Geometry", geomVal);
                        insert.PropertyValues.Add(propVal);
                        using (IFeatureReader reader = insert.Execute())
                        {
                            AppConsole.Write(".");
                            reader.Close();
                        }
                        geomVal.Dispose();
                        propVal.Dispose();
                        point.Dispose();
                        pos.Dispose();
                    }
                    //Select all
                    select = service.CreateCommand<ISelect>(CommandType.CommandType_Select);
                    select.SetFeatureClassName("Points");

                    using (IFeatureReader reader = select.Execute())
                    {
                        while (reader.ReadNext())
                        {
                            byte[] b = reader.GetGeometry("Geometry");
                            IGeometry g = service.GeometryFactory.CreateGeometryFromFgf(b);
                            using (g)
                            {
                                string text = g.Text;
                                AppConsole.WriteLine(text);
                            }
                        }
                    }
                }
            }
            catch (System.Exception ex)
            {
                Assert.Fail(ex.ToString());
            }
            finally
            {
                AppConsole.WriteLine("Cleaning up");
                if (insert != null)
                    insert.Dispose();
                if (select != null)
                    select.Dispose();
                if (conn != null)
                {
                    if (conn.ConnectionState == ConnectionState.ConnectionState_Open)
                        conn.Close();
                    conn.Dispose();
                }
                if (File.Exists(file))
                    File.Delete(file);
            }
        }
    }
}
