#region LGPL Header
// Copyright (C) 2008, Jackie Ng
// http://code.google.com/p/fdotoolbox, jumpinjackie@gmail.com
// 
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
// 
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
// 
#endregion
using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using OSGeo.FDO.Schema;

namespace FdoToolbox.Core.ETL
{
    public class FdoMetaDataNames
    {
        public const string FDO_IDENTITY_PROPERTY = "FDO_IDENTITY_PROPERTY";
        public const string FDO_DATA_TYPE = "FDO_DATA_TYPE";
        public const string FDO_DATA_AUTOGENERATED = "FDO_DATA_AUTOGENERATED";
        public const string FDO_DATA_NULLABLE = "FDO_DATA_NULLABLE";
        public const string FDO_DATA_READONLY = "FDO_DATA_READONLY";
        public const string FDO_DATA_LENGTH = "FDO_DATA_LENGTH";
        public const string FDO_DATA_DEFAULT_VALUE = "FDO_DATA_DEFAULT_VALUE";
        public const string FDO_DATA_SCALE = "FDO_DATA_SCALE";
        public const string FDO_DATA_PRECISION = "FDO_DATA_PRECISION";

        public const string FDO_GEOMETRY_PROPERTY = "FDO_GEOMETRY_PROPERTY";
        public const string FDO_GEOMETRY_TYPE = "FDO_GEOMETRY_PROPERTY_TYPE";
        public const string FDO_GEOMETRY_HAS_ELEVATION = "FDO_GEOMETRY_PROPERTY_HAS_ELEVATION";
        public const string FDO_GEOMETRY_HAS_MEASURE = "FDO_GEOMETRY_PROPERTY_HAS_MEASURE";
        public const string FDO_GEOMETRY_READONLY = "FDO_GEOMETRY_PROPERTY_READONLY";
    }

    public sealed class FdoMetaData
    {
        public static bool IsGeometryProperty(DataColumn col)
        {
            return col.ExtendedProperties[FdoMetaDataNames.FDO_GEOMETRY_PROPERTY] != null;
        }

        public static bool IsIdentityProperty(DataColumn col)
        {
            return col.ExtendedProperties[FdoMetaDataNames.FDO_IDENTITY_PROPERTY] != null;
        }

        public static bool HasMetaData(DataColumn col, string key)
        {
            return col.ExtendedProperties[key] != null;
        }

        public static int GetGeometryType(DataColumn col)
        {
            if (!HasMetaData(col, FdoMetaDataNames.FDO_GEOMETRY_TYPE))
                throw new ArgumentException("Column does not have the required metadata");
            return Convert.ToInt32(col.ExtendedProperties[FdoMetaDataNames.FDO_GEOMETRY_TYPE]);
        }

        public static bool HasElevation(DataColumn col)
        {
            if (!HasMetaData(col, FdoMetaDataNames.FDO_GEOMETRY_HAS_ELEVATION))
                throw new ArgumentException("Column does not have the required metadata");
            return Convert.ToBoolean(col.ExtendedProperties[FdoMetaDataNames.FDO_GEOMETRY_HAS_ELEVATION]);
        }

        public static bool HasMeasure(DataColumn col)
        {
            if (!HasMetaData(col, FdoMetaDataNames.FDO_GEOMETRY_HAS_MEASURE))
                throw new ArgumentException("Column does not have the required metadata");

            return Convert.ToBoolean(col.ExtendedProperties[FdoMetaDataNames.FDO_GEOMETRY_HAS_MEASURE]);
        }

        public static bool IsGeometryReadOnly(DataColumn col)
        {
            if (!HasMetaData(col, FdoMetaDataNames.FDO_GEOMETRY_READONLY))
                throw new ArgumentException("Column does not have the required metadata");

            return Convert.ToBoolean(col.ExtendedProperties[FdoMetaDataNames.FDO_GEOMETRY_READONLY]);
        }

        public static bool IsAutoGenerated(DataColumn col)
        {
            if (!HasMetaData(col, FdoMetaDataNames.FDO_DATA_AUTOGENERATED))
                throw new ArgumentException("Column does not have the required metadata");

            return Convert.ToBoolean(col.ExtendedProperties[FdoMetaDataNames.FDO_DATA_AUTOGENERATED]);
        }

        public static DataType GetDataTypeForColumn(DataColumn col)
        {
            if (!HasMetaData(col, FdoMetaDataNames.FDO_DATA_TYPE))
                throw new ArgumentException("Column does not have the required metadata");

            return (DataType)Enum.Parse(typeof(DataType), col.ExtendedProperties[FdoMetaDataNames.FDO_DATA_TYPE].ToString());
        }

        public static bool IsNullable(DataColumn col)
        {
            if (!HasMetaData(col, FdoMetaDataNames.FDO_DATA_NULLABLE))
                throw new ArgumentException("Column does not have the required metadata");

            return Convert.ToBoolean(col.ExtendedProperties[FdoMetaDataNames.FDO_DATA_NULLABLE]);
        }

        public static bool IsReadOnly(DataColumn col)
        {
            if (!HasMetaData(col, FdoMetaDataNames.FDO_DATA_READONLY))
                throw new ArgumentException("Column does not have the required metadata");

            return Convert.ToBoolean(col.ExtendedProperties[FdoMetaDataNames.FDO_DATA_READONLY]);
        }

        public static string GetDefaultValue(DataColumn col)
        {
            if (!HasMetaData(col, FdoMetaDataNames.FDO_DATA_DEFAULT_VALUE))
                throw new ArgumentException("Column does not have the required metadata");

            return col.ExtendedProperties[FdoMetaDataNames.FDO_DATA_DEFAULT_VALUE].ToString();
        }

        public static int GetLength(DataColumn col)
        {
            if (!HasMetaData(col, FdoMetaDataNames.FDO_DATA_LENGTH))
                throw new ArgumentException("Column does not have the required metadata");

            return Convert.ToInt32(col.ExtendedProperties[FdoMetaDataNames.FDO_DATA_LENGTH]);
        }

        public static int GetScale(DataColumn col)
        {
            if (!HasMetaData(col, FdoMetaDataNames.FDO_DATA_SCALE))
                throw new ArgumentException("Column does not have the required metadata");

            return Convert.ToInt32(col.ExtendedProperties[FdoMetaDataNames.FDO_DATA_SCALE]);
        }

        public static int GetPrecision(DataColumn col)
        {
            if (!HasMetaData(col, FdoMetaDataNames.FDO_DATA_PRECISION))
                throw new ArgumentException("Column does not have the required metadata");

            return Convert.ToInt32(col.ExtendedProperties[FdoMetaDataNames.FDO_DATA_PRECISION]);
        }

        public static void SetMetaData(DataColumn col, string key, object value)
        {
            col.ExtendedProperties[key] = value;
        }

        public static void CreateTableFromClass(DataTable table, ClassDefinition classDef)
        {
            table.TableName = classDef.Name;
            foreach (PropertyDefinition def in classDef.Properties)
            {
                DataColumn col = new DataColumn(def.Name);
                DataPropertyDefinition dp = def as DataPropertyDefinition;
                GeometricPropertyDefinition gp = def as GeometricPropertyDefinition;
                if (dp != null)
                {
                    col.ReadOnly = dp.ReadOnly;
                    col.AutoIncrement = dp.IsAutoGenerated;
                    col.AllowDBNull = dp.Nullable;
                    col.DataType = GetDataTypeForProperty(dp.DataType);
                    if (dp.DataType == DataType.DataType_BLOB || dp.DataType == DataType.DataType_CLOB || dp.DataType == DataType.DataType_String)
                        col.MaxLength = dp.Length;
                    if (dp.DataType == DataType.DataType_String)
                        col.DefaultValue = dp.DefaultValue;
                }
                table.Columns.Add(col);
            }
            ApplyFdoMetaData(table, classDef);
        }

        private static Type GetDataTypeForProperty(DataType dataType)
        {
            switch(dataType)
            {
                case DataType.DataType_BLOB:
                    return typeof(byte[]);
                case DataType.DataType_Boolean:
                    return typeof(bool);
                case DataType.DataType_Byte:
                    return typeof(byte);
                case DataType.DataType_CLOB:
                    return typeof(char[]);
                case DataType.DataType_DateTime:
                    return typeof(DateTime);
                case DataType.DataType_Decimal:
                    return typeof(decimal);
                case DataType.DataType_Double:
                    return typeof(double);
                case DataType.DataType_Int16:
                    return typeof(short);
                case DataType.DataType_Int32:
                    return typeof(int);
                case DataType.DataType_Int64:
                    return typeof(long);
                case DataType.DataType_Single:
                    return typeof(float);
                case DataType.DataType_String:
                    return typeof(string);
            }
            //Should never get to here
            throw new ArgumentException("Unable to find corresponding type for DataType: " + dataType);
        }

        public static void CreateTableFromSqlReader(DataTable table, OSGeo.FDO.Commands.SQL.ISQLDataReader reader, OSGeo.FDO.Connections.IConnection conn)
        {
            //As the ISQLDataReader does not carry a Class Definition. The resulting
            //DataTable carries the following assumptions:
            //
            // - All columns are nullable
            // - Identity properties will be treated as normal properties.
            int propCount = reader.GetColumnCount();
            for (int i = 0; i < propCount; i++)
            {
                string propName = reader.GetColumnName(i);
                DataType dtype = reader.GetColumnType(propName);
                DataColumn col = new DataColumn(propName);
                col.AllowDBNull = true;
                col.DataType = GetDataTypeForProperty(dtype);
                table.Columns.Add(col);
            }
        }

        public static void ApplyFdoMetaData(DataTable table, ClassDefinition classDef)
        {
            foreach (DataColumn col in table.Columns)
            {
                int pidx = classDef.Properties.IndexOf(col.ColumnName);
                if (pidx >= 0)
                {
                    PropertyDefinition pd = classDef.Properties[pidx];
                    switch (pd.PropertyType)
                    {
                        case PropertyType.PropertyType_DataProperty:
                            {
                                DataPropertyDefinition dp = pd as DataPropertyDefinition;
                                SetMetaData(col, FdoMetaDataNames.FDO_DATA_AUTOGENERATED, dp.IsAutoGenerated);
                                SetMetaData(col, FdoMetaDataNames.FDO_DATA_DEFAULT_VALUE, dp.DefaultValue);
                                SetMetaData(col, FdoMetaDataNames.FDO_DATA_TYPE, dp.DataType);
                                SetMetaData(col, FdoMetaDataNames.FDO_DATA_LENGTH, dp.Length);
                                SetMetaData(col, FdoMetaDataNames.FDO_DATA_NULLABLE, dp.Nullable);
                                SetMetaData(col, FdoMetaDataNames.FDO_DATA_READONLY, dp.ReadOnly);
                                SetMetaData(col, FdoMetaDataNames.FDO_DATA_SCALE, dp.Scale);
                                SetMetaData(col, FdoMetaDataNames.FDO_DATA_PRECISION, dp.Precision);
                                if (classDef.IdentityProperties.Contains(dp))
                                    SetMetaData(col, FdoMetaDataNames.FDO_IDENTITY_PROPERTY, true);
                            }
                            break;
                        case PropertyType.PropertyType_GeometricProperty:
                            {
                                GeometricPropertyDefinition gp = pd as GeometricPropertyDefinition;
                                SetMetaData(col, FdoMetaDataNames.FDO_GEOMETRY_PROPERTY, true);
                                SetMetaData(col, FdoMetaDataNames.FDO_GEOMETRY_TYPE, gp.GeometryTypes);
                                SetMetaData(col, FdoMetaDataNames.FDO_GEOMETRY_READONLY, gp.ReadOnly);
                                SetMetaData(col, FdoMetaDataNames.FDO_GEOMETRY_HAS_ELEVATION, gp.HasElevation);
                                SetMetaData(col, FdoMetaDataNames.FDO_GEOMETRY_HAS_MEASURE, gp.HasMeasure);
                            }
                            break;
                    }
                }
            }
        }
    }
}
